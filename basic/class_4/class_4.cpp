// class_4.cpp : 此文件包含 "main" 函数。程序执行将在此处开始并结束。
//

#include "pch.h"
#include <iostream>
#include "Time.h"
#include "Time2.h"


void func(Time mytime)
{
}

Time func()
{
	Time tmptime;
	return tmptime; //系统产生了临时对象，并调用了类的拷贝构造函数
}
int main()
{
	//一 拷贝构造函数
	//int a =3;
	//int a = b; 普通的拷贝的行为
	//默认情况下，类对象的拷贝只是每个成员变量的逐个拷贝
	//如果一个类的构造函数的第一个参数 是所属的类类型的引用，如果还有其他额外参数，
	//那么这些额外的参数还都有默认值，则这个构造函数就叫拷贝构造函数，函数默认参数必须放在函数声明中，除非该函数没有函数声明
	//拷贝构造函数的作用：会在一定的时机，被系统自动调用
	//（1）建议拷贝构造函数第一个参数总是带着const
	//（2）explicit：拷贝构造函数一般不要声明成explicit
	//“成员变量逐个拷贝”的功能因为我们自己定义的拷贝构造函数的存在而丢失了作用。
	//或者说我们自己的“拷贝构造函数”取代了系统默认的 每个成员变量逐个拷贝 的这种行为

	//（a）如果我们没有为类定义一个拷贝构造函数，编译器就会帮我们定义一个“合成拷贝构造函数”
	//（b）如果是编译器给我们合成的拷贝构造函数，这个合成拷贝构造函数一般也是讲参数tmptime的成员逐个拷贝在正在创建的对象中
		//每个成员的类型决定它如何拷贝，那么就会调用这个类的拷贝构造函数来拷贝
	//		如果成员变量是类类型，那么就会调用这个类的拷贝构造函数来拷贝
	//（c）如果你自己定义了拷贝构造函数，那么就取代了系统合成的拷贝构造函数，这个时候，你就必须要在你自己的拷贝构造函数中给类成员复制
	//		以免出现类成员没有被复制就使用的情况发生

	
	Time myTime; //这个会调用默认构造函数（不带参数）
	Time myTime2 = myTime; //调用拷贝构造函数
	Time myTime3{ myTime }; //调用拷贝构造函数
	Time myTime4(myTime); //调用拷贝构造函数
	Time myTime5 = { myTime }; //调用拷贝构造函数
    std::cout << "Hello World!\n"; 

	//还有一些情况会发生拷贝构造函数的调用的情形
	//（1）将一个对象最为实参传递给一个非引用类型的形参
	//func(myTime)
	//（2）从一个函数返回一个对象的时候

	Time mytime = func();

	
}

